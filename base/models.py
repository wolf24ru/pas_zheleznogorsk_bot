from django.db import models
from telegram_django_bot.models import TelegramUser
from datetime import datetime


class Pass_User(models.Model):
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –ø–æ–ª—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –æ–± –ø—Ä–æ–ø—É—Å–∫–∞—Ö —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º
    """

    surname = models.CharField(max_length=150,
                               db_comment="–§–∞–º–∏–ª–∏—è",
                               verbose_name="–§–∞–º–∏–ª–∏—è")
    name = models.CharField(max_length=150,
                            db_comment="–ò–º—è",
                            verbose_name="–ò–º—è")
    patronymic = models.CharField(max_length=150,
                                  db_comment="–û—Ç—á–µ—Å—Ç–≤–æ",
                                  verbose_name="–û—Ç—á–µ—Å—Ç–≤–æ",
                                  blank=True,
                                  null=True)
    status_solution = models.CharField(max_length=200,
                                       db_comment="–†–µ—à–µ–Ω–∏–µ",
                                       verbose_name="–†–µ—à–µ–Ω–∏–µ")
    bb_date = models.DateField(db_comment="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                               verbose_name="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                               blank=True,
                               null=True)
    update_date = models.DateField(db_comment="–î–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                   verbose_name="–î–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                   default=datetime.today(),
                                   blank=True,
                                   null=True)

    def show_in_list(self):
        days_left = (self.bb_date - datetime.now().date()).days
        if days_left > 0:
            return True
        else:
            return False

    def show_date(self):
        return f'{self.bb_date.day}.{self.bb_date.month}.{self.bb_date.year}'

    def __str__(self):
        if self.bb_date:
            return f'{self.surname}. {self.name}. {self.patronymic} - –æ—Å—Ç–∞–ª–æ—Å—å {(self.bb_date - datetime.now().date()).days} –¥–Ω–µ–π'
        else:
            return f'{self.surname}. {self.name}. {self.patronymic}'


class User(TelegramUser):
    FAVORITE_ICON = {
        False: 'ü§ç ',
        True: '‚ù§Ô∏è '
    }

    date = models.PositiveIntegerField(default=60,
                                       db_comment='–î–Ω–µ–π –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                                       verbose_name='–î–Ω–µ–π –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')

    subscriptions = models.ManyToManyField(Pass_User,
                                           verbose_name="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                           db_constraint="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                           related_name="telegram_users",
                                           related_query_name="telegram_user_s",
                                           blank=True)


class SNILS(models.Model):
    name = models.CharField(max_length=150,
                            db_comment="–ò–º—è –°–ù–ò–õ–°",
                            verbose_name="–ò–º—è –°–ù–ò–õ–°",
                            blank=True)
    number = models.CharField(max_length=20,
                              db_comment="–ù–æ–º–µ—Ä –°–ù–ò–õ–°",
                              verbose_name="–ù–æ–º–µ—Ä –°–ù–ò–õ–°",
                              unique=True)
    users_snils = models.ManyToManyField(User,
                                         verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                                         related_name='snilss',
                                         related_query_name='snils')
    pass_user = models.ManyToManyField(Pass_User,
                                       verbose_name='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤',
                                       related_name='snils_pass',
                                       related_query_name='snils_pass_s',
                                       blank=True)

    def __str__(self):
        return f'{self.name} - {self.number}'
